#pragma once

#include <cstdint>

/**
 * @brief AES encryption and decryption class.
 *
 * This class provides methods for AES (Advanced Encryption Standard) encryption and decryption.
 * It supports AES-256 with a 32-byte key. The class includes the S-Box and Inverse S-Box for
 * substitution operations, as well as the round constants used in key expansion.
 */
class AES256 {
public:
    /**
     * @brief Encrypts a block of plaintext using AES-256.
     *
     * This method performs AES-256 encryption on a block of plaintext using the provided key
     * and stores the result in the ciphertext buffer.
     *
     * @param plaintext Pointer to the input plaintext block (16 bytes).
     * @param key Pointer to the 32-byte key used for encryption.
     * @param ciphertext Pointer to the output buffer where the encrypted data will be stored (16 bytes).
     */
    static void Encrypt(const uint8_t* plaintext, const uint8_t key[32], uint8_t* ciphertext);

    /**
     * @brief Decrypts a block of ciphertext using AES-256.
     *
     * This method performs AES-256 decryption on a block of ciphertext using the provided key
     * and stores the result in the plaintext buffer.
     *
     * @param ciphertext Pointer to the input ciphertext block (16 bytes).
     * @param key Pointer to the 32-byte key used for decryption.
     * @param plaintext Pointer to the output buffer where the decrypted data will be stored (16 bytes).
     */
    static void Decrypt(const uint8_t* ciphertext, const uint8_t key[32], uint8_t* plaintext);

private:
    // Round constants used in key expansion
    static constexpr uint32_t RCon[10] = {
        0x01000000, 0x02000000, 0x04000000, 0x08000000,
        0x10000000, 0x20000000, 0x40000000, 0x80000000,
        0x1b000000, 0x36000000
    };

    // Substitution box for byte substitution in the encryption and decryption processes
    static constexpr uint8_t SBox[256] = {
        // 0     1     2     3     4     5     6     7     8     9     A     B     C     D     E     F
        0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, // 0
        0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, // 1
        0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, // 2
        0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, // 3
        0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, // 4
        0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, // 5
        0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, // 6
        0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, // 7
        0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, // 8
        0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, // 9
        0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, // A
        0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, // B
        0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, // C
        0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, // D
        0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, // E
        0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16  // F
    };

    // Inverse substitution box used for decryption
    static constexpr uint8_t InvSBox[256] = {
        // 0     1     2     3     4     5     6     7     8     9     A     B     C     D     E     F
        0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, // 0
        0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, // 1
        0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, // 2
        0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, // 3
        0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, // 4
        0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, // 5
        0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, // 6
        0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, // 7
        0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, // 8
        0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, // 9
        0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, // A
        0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, // B
        0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, // C
        0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, // D
        0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, // E
        0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d  // F
    };

    /**
     * @brief Rotates a 32-bit word left by one byte.
     *
     * This helper function rotates a 32-bit word left by one byte.
     *
     * @param word The 32-bit word to be rotated.
     * @return The rotated 32-bit word.
     */
    inline static uint32_t RotWord(uint32_t word);

    /**
     * @brief Substitutes bytes in a 32-bit word using the S-Box.
     *
     * This helper function applies the S-Box substitution to each byte of a 32-bit word.
     *
     * @param word The 32-bit word to be substituted.
     * @return The substituted 32-bit word.
     */
    inline static uint32_t SubWord(uint32_t word);

    /**
     * @brief Expands the key into a series of round keys.
     *
     * This method performs key expansion to generate round keys for the AES algorithm.
     *
     * @param key Pointer to the 32-byte key used for expansion.
     * @param roundKeys Array to store the expanded round keys.
     */
    static void KeyExpansion(const uint8_t key[32], uint32_t roundKeys[60]);

    /**
     * @brief Multiplies two bytes in the Galois Field GF(2^8).
     *
     * This method performs multiplication of two bytes under modulo x^8 + x^4 + x^3 + x + 1,
     * which is used in AES encryption and decryption.
     *
     * @param a The first byte.
     * @param b The second byte.
     * @return The result of the multiplication.
     */
    inline static uint8_t gf_mul(uint8_t a, uint8_t b);
};


uint32_t AES256::RotWord(uint32_t word) {
    return (word << 8) | (word >> 24);
}


uint32_t AES256::SubWord(uint32_t word) {
    return (SBox[(word >> 24) & 0xff] << 24) |
        (SBox[(word >> 16) & 0xff] << 16) |
        (SBox[(word >> 8) & 0xff] << 8) |
        SBox[word & 0xff];
}

uint8_t AES256::gf_mul(uint8_t a, uint8_t b) {
    uint8_t result = 0;           // Initialize the result of the multiplication to 0
    uint8_t high_bit_mask = 0x80; // Mask to check the highest bit (bit 7) of a byte
    uint8_t high_bit = 0;         // Variable to store the value of the highest bit of `a`
    uint8_t modulo = 0x1b;        // AES irreducible polynomial (x^8 + x^4 + x^3 + x + 1)

    // Perform the multiplication over 8 bits (since a and b are 8-bit values)
    for (int i = 0; i < 8; i++) {
        // If the least significant bit of `b` is 1, XOR the current value of `a` with `result`
        if (b & 1) {
            result ^= a;
        }

        // Store the highest bit of `a` (before shifting it left)
        high_bit = a & high_bit_mask;

        // Shift `a` left by 1 to multiply by 2 in the polynomial field
        a <<= 1;

        // If the highest bit was set (before the shift), reduce `a` by the AES polynomial
        if (high_bit) {
            a ^= modulo;
        }

        // Shift `b` right by 1 to process the next bit in the next iteration
        b >>= 1;
    }

    // Return the resulting product in GF(2^8)
    return result;
}